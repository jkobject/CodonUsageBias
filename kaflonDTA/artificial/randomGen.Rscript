
library(stats)
################
#### Function to generate random samples
################
mkSample<-function(len,numCods=2,trials=100000)
#first argument: length of genome
#second argument: number of codons
#third argument: How many genomes do we want to analyse
{

frq<-rep(1/numCods,numCods)
#now generate the highest probability sequence
maxSeq<-rep(len%/%numCods,numCods)

tmp<-len%%numCods

if(tmp >0){maxSeq[c(1:tmp)]<-maxSeq[c(1:tmp)] + 1}

tmp3<-maxSeq
#calculate now the maximal probability
maxProb <-dmultinom(tmp3,prob=frq,log=F)

#now produce a sample
tmp<-rmultinom(trials, size = len, prob = frq)
tmp2<-apply(tmp,2,function(x) dmultinom(x,prob=frq,log=F))

tmp3<-(log(maxProb/tmp2));

# tmp3<-(tmp2);
 
}

##############
###  Same as mkSample but allows biased vectors
###############
###############


mkSample2<-function(len,numCods=2,trials=100000,bias)
#first argument: length of genome
#second argument: number of codons
#third argument: How many genomes do we want to analyse
#fourth argument: bias vector
{
frq<-bias
frqN<-rep(1/numCods,numCods)

#now generate the highest probability sequence
maxSeq<-rep(len%/%numCods,numCods)
tmp<-len%%numCods
if(tmp >0){maxSeq[c(1:tmp)]<-maxSeq[c(1:tmp)] + 1}
tmp3<-maxSeq
#calculate now the maximal probability
maxProb <-dmultinom(tmp3,prob=frqN,log=F)
#now produce a sample
tmp<-rmultinom(trials, size = len, prob = frq)
#Analyse sample using the equal probability frequency ##### NB!
tmp2<-apply(tmp,2,function(x) dmultinom(x,prob=frqN,log=F))
tmp3<-(-log(tmp2));

# tmp3<-(tmp2);
 
}

################
#### Function to generate a mixture of plots
#### Adds randomness to the length of sequences
################
mkRdSample<-function(len,numCods=2,trials=100000)
{

#len2<-20
#if(runif(1)<0.5) {len2<-100}

len2<-sample(c(1:50),1)


mkSample(len2,numCods,trials)

}

##############################
################
#Produces a random sequence
#Then produces a fit to exponentkal model.
#Retruns the coef of the fit
################
getFits<-function(len,cods,bs=0){
a<-mkSample(len,cods,100000)
#a<-mkSample2(len,3,100000,c(1/3 +bs,1/3+bs,1/3-2*bs))
#<-mkSample(len,6,1000)
tmp<-a[a!=0]
a<-tmp
mina<-min(a)
maxa<-max(a)
fg<-ecdf(a)
#plot(fg)
pts<- seq(mina,maxa,abs(mina-maxa)/1000)
tmp<-as.data.frame(cbind(pts + abs(mina),fg(pts)))
colnames(tmp)<-c("V1","V2")
fit<-nls(V2~1-exp(1)^(a*V1*2),data=as.list(tmp),start=list(a=-1))
plot(pts,predict(fit))

coef(fit)


}
############################################


a<-mkSample2(20,2,10000,c(4/6,2/6))

hist(a,br=10000)
